"use client";

import Image from "next/image";
import {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";

type Choice = "treat" | "trick";
type ResultType = "treat" | "trick";

type GamePhase = "intro" | "play" | "final";

type MiniGameType = "ghost";

interface PlayContext {
  name?: string;
  likes: string[];
  likeFallback: string;
}

interface OutcomeDetails {
  id: string;
  choice: Choice;
  type: ResultType;
  label: string;
  message: string;
  prompt?: string;
  miniGame?: MiniGameType;
  miniGameComplete?: boolean;
  miniGameSuccess?: boolean;
  timestamp: number;
}

const MAX_TURNS = 8;
const TREAT_WEIGHT = 0.7;

const generateTurnId = (random: () => number) => {
  const segment = () => Math.floor(random() * 0xfffff)
    .toString(16)
    .padStart(5, "0");
  return `turn-${Date.now().toString(36)}-${segment()}${segment()}`;
};

const formatName = (raw?: string) => {
  const value = raw?.trim();
  if (!value) return "b·∫°n";
  return value;
};

const extractLikes = (raw: string) => {
  return raw
    .split(",")
    .map((item) => item.trim())
    .filter(Boolean)
    .slice(0, 3);
};

const treatCompliments = [
  "[T√™n] c√≥ n·ª• c∆∞·ªùi l√†m ng√†y u √°m c≈©ng s√°ng l√™n.",
  "B·∫°n t·ª≠ t·∫ø theo c√°ch khi·∫øn ng∆∞·ªùi kh√°c mu·ªën t·ªët b·ª•ng h∆°n.",
  "B·∫°n l√†m cƒÉn ph√≤ng ·∫•m h∆°n +10¬∞ vui m·ªói l·∫ßn xu·∫•t hi·ªán.",
  "ƒê√¥i m·∫Øt bi·∫øt k·ªÉ chuy·ªán; h√¥m nay k·ªÉ chuy·ªán vui cho ch√≠nh b·∫°n nh√©.",
  "B·∫°n l√† b·∫£n g·ªëc ƒë·ªôc nh·∫•t v√¥ nh·ªã ‚Äì r·∫•t ƒë√°ng qu√Ω.",
  "B·∫°n khi·∫øn ƒëi·ªÅu nh·ªè x√≠u c≈©ng th√†nh ni·ªÅm vui to.",
  "Tr√°i tim b·∫°n bi·∫øt l·∫Øng nghe; c·∫£m ∆°n v√¨ ƒëi·ªÅu ƒë√≥.",
] as const;

const treatGifts = [
  "üéüÔ∏è Voucher √îm ·∫§m √Åp: ƒë·ªïi 1 c√°i √¥m th·∫≠t ch·∫∑t b·∫•t c·ª© l√∫c n√†o.",
  "ü´∂ Sticker ‚ÄúB·∫°n l√†m ƒë∆∞·ª£c!‚Äù: d√°n v√†o h√¥m nay.",
  "üåü M·ªôt l·ªùi ch√∫c: B√¨nh y√™n, ng·ªçt ng√†o, m·ªçi ƒëi·ªÅu nh∆∞ √Ω.",
] as const;

const treatCustom = [
  "[T√™n] v√† [LIKE] ‚Äì combo ho√†n h·∫£o t·∫°o n√™n ng√†y tuy·ªát v·ªùi.",
  "[LIKE] l√†m d·ªÖ ch·ªãu, nh∆∞ng [T√™n] c√≤n l√†m tr√°i tim ·∫•m h∆°n.",
  "Khi nh·∫Øc ƒë·∫øn [LIKE], m·ªçi ng∆∞·ªùi s·∫Ω nh·ªõ ƒë·∫øn ni·ªÅm vui m√† b·∫°n lan t·ªèa.",
] as const;

const trickPrompts = [
  {
    message: "Nh·∫£y l·∫Øc l∆∞ 10 gi√¢y theo nh·∫°c trong ƒë·∫ßu b·∫°n.",
    prompt: "ƒê·∫øm nh·ªãp nh∆∞ m√°y arcade: 1-2-3-4, c·ª© th·∫ø l·∫∑p l·∫°i!",
    miniGame: false,
  },
  {
    message: "G·ª≠i m·ªôt emoji d·ªÖ th∆∞∆°ng nh·∫•t b·∫°n c√≥.",
    prompt: "Ch·ªçn ngay emoji khi·∫øn b·∫°n ph·∫£i m·ªâm c∆∞·ªùi.",
    miniGame: false,
  },
  {
    message: "K·ªÉ nhanh 1 k·ª∑ ni·ªám vui c·ªßa h√¥m nay.",
    prompt: "Kh√¥ng c√≥ th√¨ k·ªÉ v·ªÅ k·ª∑ ni·ªám vui g·∫ßn nh·∫•t c≈©ng ƒë∆∞·ª£c!",
    miniGame: false,
  },
  {
    message: "N√≥i ‚ÄúT√¥i th·∫≠t tuy·ªát‚Äù 3 l·∫ßn (nh·ªè c≈©ng ƒë∆∞·ª£c).",
    prompt: "T·∫∑ng th√™m m·ªôt c√°i g·∫≠t ƒë·∫ßu sau m·ªói l·∫ßn n√≥i nh√©.",
    miniGame: false,
  },
  {
    message: "H√≠t s√¢u 3 l·∫ßn, nh·∫Øm m·∫Øt 5 gi√¢y r·ªìi c∆∞·ªùi nh·∫π.",
    prompt: "G·ª≠i ti·∫øng c∆∞·ªùi ƒë√≥ v√†o kh√¥ng kh√≠ ƒë·ªÉ n√≥ quay l·∫°i v·ªõi b·∫°n.",
    miniGame: false,
  },
  {
    message: "U·ªëng m·ªôt ng·ª•m n∆∞·ªõc v√† v∆∞∆°n vai th·∫≠t ƒë√£.",
    prompt: "Th√™m m·ªôt v√≤ng xoay c·ªï nh·∫π ƒë·ªÉ c∆° th·ªÉ t·ªânh t√°o.",
    miniGame: false,
  },
  {
    message: "Vi·∫øt 1 c√¢u c·∫£m ∆°n d√†nh cho b·∫£n th√¢n ngay b√¢y gi·ªù.",
    prompt: "C√≥ th·ªÉ l√† ‚ÄúC·∫£m ∆°n m√¨nh v√¨ ƒë√£ c·ªë g·∫Øng ƒë·∫øn l√∫c n√†y‚Äù.",
    miniGame: false,
  },
] as const;

const trickWithMiniGame = {
  message: "Mini-game Candy Arcade: b·∫Øt con ma üëª trong 6 gi√¢y!",
  prompt: "B·∫•m tr√∫ng ma tinh ngh·ªãch ƒë·ªÉ nh·∫≠n 1 k·∫πo t∆∞·ªüng t∆∞·ª£ng üç¨.",
  miniGame: true,
} as const;

const useRetroAudio = () => {
  const [enabled, setEnabled] = useState(true);
  const contextRef = useRef<AudioContext | null>(null);

  const ensureContext = useCallback(() => {
    if (!enabled) {
      return null;
    }
    let ctx = contextRef.current;
    if (!ctx) {
      ctx = new AudioContext();
      contextRef.current = ctx;
    }
    if (ctx.state === "suspended") {
      void ctx.resume();
    }
    return ctx;
  }, [enabled]);

  const playTone = useCallback(
    (frequency: number, duration: number, gainValue = 0.12) => {
      const ctx = ensureContext();
      if (!ctx) return;

      const osc = ctx.createOscillator();
      const gain = ctx.createGain();
      osc.type = "square";
      osc.frequency.setValueAtTime(frequency, ctx.currentTime);

      gain.gain.setValueAtTime(gainValue, ctx.currentTime);
      gain.gain.exponentialRampToValueAtTime(
        0.001,
        ctx.currentTime + duration + 0.05,
      );

      osc.connect(gain).connect(ctx.destination);
      osc.start();
      osc.stop(ctx.currentTime + duration + 0.05);
    },
    [ensureContext],
  );

  const playCoin = useCallback(() => {
    playTone(880, 0.12);
    window.setTimeout(() => playTone(1320, 0.1, 0.1), 90);
  }, [playTone]);

  const playClick = useCallback(() => {
    playTone(440, 0.08, 0.08);
  }, [playTone]);

  const playSuccess = useCallback(() => {
    playTone(990, 0.1, 0.1);
    window.setTimeout(() => playTone(1480, 0.12, 0.09), 80);
    window.setTimeout(() => playTone(1760, 0.14, 0.08), 160);
  }, [playTone]);

  const toggle = useCallback(() => {
    setEnabled((prev) => !prev);
  }, []);

  // Background music - nh·∫°c n·ªÅn t·ª± ƒë·ªông t·ª´ file c√≥ s·∫µn trong public
  const bgMusicRef = useRef<HTMLAudioElement | null>(null);
  const [bgMusicEnabled, setBgMusicEnabled] = useState(true);

  // Kh·ªüi t·∫°o nh·∫°c n·ªÅn t·ª´ file c√≥ s·∫µn trong public
  useEffect(() => {
    if (!bgMusicRef.current) {
      // ƒê·∫∑t ƒë∆∞·ªùng d·∫´n file nh·∫°c ·ªü ƒë√¢y - ƒë·ªïi t√™n file theo file b·∫°n c√≥
      // V√≠ d·ª•: /background-music.mp3, /bg-music.wav, /halloween.mp3, etc.
      const musicPath = "/background-music.mp3";
      
      const audio = new Audio(musicPath);
      audio.loop = true;
      audio.volume = 0.5; // Volume m·∫∑c ƒë·ªãnh 50%
      
      // X·ª≠ l√Ω l·ªói khi file kh√¥ng t·ªìn t·∫°i
      audio.addEventListener("error", () => {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file nh·∫°c:", musicPath, "Vui l√≤ng ƒë·∫∑t file nh·∫°c v√†o th∆∞ m·ª•c public/");
        bgMusicRef.current = null;
      });
      
      bgMusicRef.current = audio;

      // Th·ª≠ ph√°t nh·∫°c ngay l·∫≠p t·ª©c n·∫øu ƒë∆∞·ª£c ph√©p
      if (enabled && bgMusicEnabled) {
        audio.play().catch(() => {
          // Autoplay b·ªã block ho·∫∑c file kh√¥ng t·ªìn t·∫°i - kh√¥ng hi·ªÉn th·ªã l·ªói
        });
      }
    }

    return () => {
      if (bgMusicRef.current) {
        bgMusicRef.current.pause();
        bgMusicRef.current = null;
      }
    };
  }, [enabled, bgMusicEnabled]); // Ch·∫°y l·∫°i khi enabled ho·∫∑c bgMusicEnabled thay ƒë·ªïi

  const startBackgroundMusic = useCallback(() => {
    if (!enabled || !bgMusicEnabled) return;
    
    // Kh·ªüi t·∫°o audio n·∫øu ch∆∞a c√≥
    if (!bgMusicRef.current) {
      const musicPath = "/background-music.mp3";
      const audio = new Audio(musicPath);
      audio.loop = true;
      audio.volume = 0.5;
      
      // X·ª≠ l√Ω l·ªói khi file kh√¥ng t·ªìn t·∫°i
      audio.addEventListener("error", () => {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file nh·∫°c:", musicPath, "Vui l√≤ng ƒë·∫∑t file nh·∫°c v√†o th∆∞ m·ª•c public/");
        bgMusicRef.current = null;
      });
      
      bgMusicRef.current = audio;
    }
    
    // Th·ª≠ ph√°t nh·∫°c n·∫øu audio t·ªìn t·∫°i
    if (bgMusicRef.current) {
      bgMusicRef.current.play().catch(() => {
        // Autoplay b·ªã block ho·∫∑c file kh√¥ng t·ªìn t·∫°i - kh√¥ng hi·ªÉn th·ªã l·ªói
      });
    }
  }, [enabled, bgMusicEnabled]);

  const stopBackgroundMusic = useCallback(() => {
    if (bgMusicRef.current) {
      bgMusicRef.current.pause();
    }
  }, []);

  const toggleBgMusic = useCallback(() => {
    setBgMusicEnabled((prev) => {
      if (prev) {
        stopBackgroundMusic();
      } else {
        startBackgroundMusic();
      }
      return !prev;
    });
  }, [startBackgroundMusic, stopBackgroundMusic]);

  useEffect(() => {
    if (bgMusicRef.current) {
      bgMusicRef.current.volume = 0.5;
    }
  }, []);

  // T·ª± ƒë·ªông b·∫≠t nh·∫°c n·ªÅn khi enabled ho·∫∑c bgMusicEnabled thay ƒë·ªïi
  useEffect(() => {
    if (enabled && bgMusicEnabled) {
      // Th·ª≠ ph√°t nh·∫°c ngay
      startBackgroundMusic();

      // N·∫øu browser block autoplay, ƒë·ª£i user interaction
      const handleFirstInteraction = () => {
        startBackgroundMusic();
        document.removeEventListener("click", handleFirstInteraction);
        document.removeEventListener("keydown", handleFirstInteraction);
        document.removeEventListener("touchstart", handleFirstInteraction);
      };
      
      document.addEventListener("click", handleFirstInteraction, { once: true });
      document.addEventListener("keydown", handleFirstInteraction, { once: true });
      document.addEventListener("touchstart", handleFirstInteraction, { once: true });

      return () => {
        document.removeEventListener("click", handleFirstInteraction);
        document.removeEventListener("keydown", handleFirstInteraction);
        document.removeEventListener("touchstart", handleFirstInteraction);
      };
    } else {
      stopBackgroundMusic();
    }
  }, [enabled, bgMusicEnabled, startBackgroundMusic, stopBackgroundMusic]);


  return {
    enabled,
    toggle,
    playCoin,
    playClick,
    playSuccess,
    bgMusicEnabled,
    toggleBgMusic,
  };
};

const GhostChase = ({
  onFinished,
}: {
  onFinished: (success: boolean) => void;
}) => {
  const [position, setPosition] = useState({ top: 50, left: 50 });
  const [timeLeft, setTimeLeft] = useState(6);
  const [caught, setCaught] = useState(false);
  const hasFinishedRef = useRef(false);
  const movementRef = useRef<number | null>(null);
  const countdownRef = useRef<number | null>(null);

  useEffect(() => {
    const updatePosition = () => {
      if (hasFinishedRef.current) return;
      const top = 10 + Math.random() * 80;
      const left = 8 + Math.random() * 84;
      setPosition({ top, left });
    };

    movementRef.current = window.setInterval(updatePosition, 280);
    return () => {
      if (movementRef.current) {
        window.clearInterval(movementRef.current);
      }
    };
  }, []);

  useEffect(() => {
    countdownRef.current = window.setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          if (!hasFinishedRef.current) {
            hasFinishedRef.current = true;
            onFinished(caught);
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => {
      if (countdownRef.current) {
        window.clearInterval(countdownRef.current);
      }
    };
  }, [caught, onFinished]);

  const handleCatch = () => {
    if (hasFinishedRef.current) return;
    hasFinishedRef.current = true;
    setCaught(true);
    onFinished(true);
  };

  useEffect(() => {
    if (hasFinishedRef.current) {
      if (movementRef.current) {
        window.clearInterval(movementRef.current);
      }
      if (countdownRef.current) {
        window.clearInterval(countdownRef.current);
      }
    }
  }, [caught]);

  return (
    <div className="pixel-card mt-6 bg-[#111827]">
      <p className="text-xs font-semibold uppercase tracking-[0.35em] text-[#22d3ee]">
        B·∫Øt ma trong {timeLeft} gi√¢y
      </p>
      <div className="relative mt-4 h-48 w-full border-[3px] border-black bg-[#0b1120]">
        <button
          type="button"
          onClick={handleCatch}
          className="absolute flex h-12 w-12 -translate-x-1/2 -translate-y-1/2 items-center justify-center border-[3px] border-black bg-[#22d3ee] font-[var(--font-display)] text-lg text-black transition-transform duration-75"
          style={{
            top: `${position.top}%`,
            left: `${position.left}%`,
          }}
        >
          üëª
        </button>
      </div>
      <p className="mt-3 text-[11px] font-medium uppercase tracking-[0.3em] text-[#f8fafc]/70">
        B·∫•m tr√∫ng ma ƒë·ªÉ nh·∫≠n k·∫πo t∆∞·ªüng t∆∞·ª£ng th∆°m l·ª´ng!
      </p>
    </div>
  );
};

const useRandom = () => {
  const seedRef = useRef(1);
  const next = useCallback(() => {
    const seed = seedRef.current;
    const nextSeed = (seed * 1664525 + 1013904223) % 4294967296;
    seedRef.current = nextSeed;
    return nextSeed / 4294967296;
  }, []);

  const pick = useCallback(
    <T,>(items: readonly T[]): T => {
      const value = next();
      const index = Math.floor(value * items.length);
      return items[index];
    },
    [next],
  );

  return { next, pick, seedRef };
};

const buildTreatOutcome = (
  ctx: PlayContext,
  pick: <T,>(items: readonly T[]) => T,
  random: () => number,
): OutcomeDetails => {
  const useCustom =
    ctx.likes.length > 0 && random() < 0.4 && treatCustom.length > 0;
  const template = useCustom
    ? pick(treatCustom)
    : pick(
        [
          ...treatCompliments,
          ...treatGifts,
        ] as const,
      );

  const like =
    ctx.likes.length > 0
      ? ctx.likes[Math.floor(random() * ctx.likes.length)]
      : ctx.likeFallback;

  const message = template
    .replace(/\[T√™n\]/g, formatName(ctx.name))
    .replace(/\[LIKE\]/g, like);

  const label = template.includes("Voucher")
    ? "Voucher ng·ªçt ng√†o"
    : template.includes("Sticker")
    ? "Sticker c·ªï v≈©"
    : template.includes("l·ªùi ch√∫c")
    ? "Ch√∫c ·∫•m √°p"
    : "K·∫πo khen ng·ª£i";

  return {
    id: generateTurnId(random),
    choice: "treat",
    type: "treat",
    label,
    message,
    prompt: undefined,
    timestamp: Date.now(),
  };
};

const buildTrickOutcome = (
  ctx: PlayContext,
  pick: <T,>(items: readonly T[]) => T,
  includeMiniGame: boolean,
  random: () => number,
): OutcomeDetails => {
  const useMiniGame = includeMiniGame && random() < 0.4;
  const template = useMiniGame
    ? trickWithMiniGame
    : pick(trickPrompts as unknown as readonly (typeof trickPrompts[number])[]);

  return {
    id: generateTurnId(random),
    choice: "trick",
    type: "trick",
    label: template.miniGame ? "Mini-game pixel" : "Th·ª≠ th√°ch d·ªÖ th∆∞∆°ng",
    message: template.message
      .replace(/\[T√™n\]/g, formatName(ctx.name))
      .replace(/\[LIKE\]/g, ctx.likeFallback),
    prompt: template.prompt,
    miniGame: template.miniGame ? "ghost" : undefined,
    timestamp: Date.now(),
  };
};

const VoucherPreview = ({
  name,
 
}: {
  name: string;
}) => {
  const displayName = name ? name : "B·∫°n";
  return (
    <div className="pixel-card bg-[#151c2f] text-[#f8fafc]">
      <h3 className="text-base">Qu√† t·∫∑ng cu·ªëi c√πng mong r·∫±ng c·∫≠u ƒë·ª´ng ch√™</h3>
      <div className="mt-4 grid gap-2 text-left text-xs font-semibold uppercase tracking-[0.35em] text-[#22d3ee]">
        <span>Ch·ªß s·ªü h·ªØu</span>
        <span className="pixel-card bg-[#0f172a] px-4 py-3 text-[#fb923c]">
          <p>( R√π r√¨ )8B ƒê·∫∑ng T·∫•t , Ba ƒê√¨nh , H√† N·ªôi</p>
          <p>( Drip Station ) - T·∫ßng 4 khu t·∫≠p th·ªÉ A ng√µ 70 Ng·ªçc Kh√°nh </p>
          <p> ( Coffe Koem )107-K2 KTT Th√†nh C√¥ng , Ba ƒê√¨nh </p>
          <p> (Leo s Tavern ) 9A B·∫£o Kh√°nh Ho√†n Ki·∫øm</p>
        </span>
      </div>
      <p className="mt-4 text-[11px] uppercase tracking-[0.3em] text-[#f8fafc]/75">
        H·ª£p l·ªá vƒ©nh vi·ªÖn ‚Ä¢ D√πng c√†ng nhi·ªÅu c√†ng t·ªët
      </p>
    </div>
  );
};

const generateVoucherImage = (name: string) => {
  const canvas = document.createElement("canvas");
  canvas.width = 900;
  canvas.height = 540;
  const ctx = canvas.getContext("2d");
  if (!ctx) return;

  const safeName = name ? name.trim() : "B·∫°n";

  // Background
  ctx.fillStyle = "#0f172a";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Outer border
  ctx.fillStyle = "#6d28d9";
  ctx.fillRect(30, 30, canvas.width - 60, canvas.height - 60);

  // Inner panel
  ctx.fillStyle = "#1f2937";
  ctx.fillRect(70, 70, canvas.width - 140, canvas.height - 140);

  // Pixel border accent
  ctx.strokeStyle = "#22d3ee";
  ctx.lineWidth = 8;
  ctx.strokeRect(90, 90, canvas.width - 180, canvas.height - 180);

  ctx.fillStyle = "#fb923c";
  ctx.font = "34px 'Press Start 2P', 'Fira Sans', monospace";
  ctx.textAlign = "center";
  ctx.fillText("Qu√† t·∫∑ng cu·ªëi c√πng", canvas.width / 2, 150);

  ctx.fillStyle = "#f8fafc";
  ctx.font = "22px 'Fira Sans', sans-serif";
  ctx.textAlign = "left";
  ctx.fillText("Ch·ªß s·ªü h·ªØu:", 140, 240);

  ctx.fillStyle = "#22d3ee";
  ctx.font = "28px 'Press Start 2P', monospace";
  ctx.fillText(safeName.toUpperCase(), 140, 300);

  ctx.fillStyle = "#f8fafc";
  ctx.font = "20px 'Fira Sans', sans-serif";
  ctx.fillText("H·ª£p l·ªá vƒ©nh vi·ªÖn ‚Ä¢ D√πng c√†ng nhi·ªÅu c√†ng t·ªët", 140, 360);

  ctx.fillStyle = "#fb923c";
  ctx.font = "18px 'Press Start 2P', monospace";
  ctx.fillText("Retro Candy Arcade", 140, 470);

  const link = document.createElement("a");
  const slug = safeName.toLowerCase().replace(/\s+/g, "-");
  link.download = `voucher-om-${slug || "ban"}.png`;
  link.href = canvas.toDataURL("image/png");
  link.click();
};

export default function Home() {
  const [phase, setPhase] = useState<GamePhase>("intro");
  const [playerName, setPlayerName] = useState("");
  const [likesInput, setLikesInput] = useState("");
  const [likes, setLikes] = useState<string[]>([]);
  const [turnCount, setTurnCount] = useState(0);
  const [currentOutcome, setCurrentOutcome] = useState<OutcomeDetails | null>(
    null,
  );
  const [history, setHistory] = useState<OutcomeDetails[]>([]);
  const [isAnimatingDoor, setIsAnimatingDoor] = useState(false);
  const [doorOpen, setDoorOpen] = useState(false);

  const {
    enabled: soundEnabled,
    toggle: toggleSound,
    playCoin,
    playClick,
    bgMusicEnabled,
    toggleBgMusic,
  } = useRetroAudio();

  const { next: nextRandom, pick, seedRef } = useRandom();

  const ctx = useMemo<PlayContext>(() => {
    const trimmedName = playerName.trim();
    const parsedLikes = likes;
    return {
      name: trimmedName || undefined,
      likes: parsedLikes,
      likeFallback: parsedLikes[0] ?? "ni·ªÅm vui pixel",
    };
  }, [playerName, likes]);

  const resetGame = useCallback(() => {
    setPhase("intro");
    setTurnCount(0);
    setCurrentOutcome(null);
    setHistory([]);
    setIsAnimatingDoor(false);
    setDoorOpen(false);
  }, []);

  const handleStart = useCallback(() => {
    setLikes(extractLikes(likesInput));
    seedRef.current =
      (Date.now() % 4294967296) || 1;
    setTurnCount(0);
    setCurrentOutcome(null);
    setHistory([]);
    setIsAnimatingDoor(false);
    setDoorOpen(false);
    setPhase("play");
    playClick();
  }, [likesInput, playClick, seedRef]);

  const handleDoorChoice = useCallback(
    (choice: Choice) => {
      if (isAnimatingDoor || turnCount >= MAX_TURNS) return;
      playClick();
      setIsAnimatingDoor(true);
      setDoorOpen(true);
      setCurrentOutcome(null);

      window.setTimeout(() => {
        const roll = nextRandom();
        const type: ResultType =
          roll < TREAT_WEIGHT ? "treat" : "trick";

        let outcome: OutcomeDetails;
        if (type === "treat") {
          outcome = buildTreatOutcome(
            { ...ctx },
            (items) => pick(items),
            nextRandom,
          );
          playCoin();
        } else {
          const includeMiniGame = turnCount < MAX_TURNS - 1;
          outcome = buildTrickOutcome(
            { ...ctx },
            (items) => pick(items),
            includeMiniGame,
            nextRandom,
          );
        }

        outcome = {
          ...outcome,
          choice,
        };

        setCurrentOutcome(outcome);
        setHistory((prev) => [outcome, ...prev].slice(0, 6));
        setTurnCount((prev) => prev + 1);
        if (outcome.type === "treat") {
          playCoin();
        }

        setIsAnimatingDoor(false);
        window.setTimeout(() => setDoorOpen(false), 260);
      }, 520);
    },
    [
      ctx,
      isAnimatingDoor,
      nextRandom,
      pick,
      playClick,
      playCoin,
      turnCount,
    ],
  );

  const handleMiniGameFinished = useCallback(
    (success: boolean) => {
      setCurrentOutcome((prev) => {
        if (!prev || !prev.miniGame || prev.miniGameComplete) return prev;
        if (success) {
          playCoin();
        }
        return {
          ...prev,
          miniGameComplete: true,
          miniGameSuccess: success,
        };
      });

      setHistory((prev) =>
        prev.map((item) =>
          item.id === currentOutcome?.id
            ? {
                ...item,
                miniGameComplete: true,
                miniGameSuccess: success,
              }
            : item,
        ),
      );
    },
    [
      currentOutcome?.id,
      playCoin,
    ],
  );

  const handleToFinal = useCallback(() => {
    playClick();
    setPhase("final");
  }, [playClick]);

  const turnsLeft = MAX_TURNS - turnCount;
  const displayName = formatName(ctx.name);

  return (
    <>
      <div className="retro-scanline" aria-hidden="true" />
      <div className="halloween-bg" aria-hidden="true">
        <div className="halloween-bg__item halloween-bg__item--1">
          <Image src="/hal.png" alt="" fill sizes="150px" className="halloween-bg__image" />
        </div>
        <div className="halloween-bg__item halloween-bg__item--2">
          <Image src="/hal2.png" alt="" fill sizes="150px" className="halloween-bg__image" />
        </div>
        <div className="halloween-bg__item halloween-bg__item--3">
          <Image src="/hal4.png" alt="" fill sizes="70px" className="halloween-bg__image" />
        </div>
        <div className="halloween-bg__item halloween-bg__item--4">
          <Image src="/hal2.png" alt="" fill sizes="60px" className="halloween-bg__image" />
        </div>
        <div className="halloween-bg__item halloween-bg__item--5">
          <Image src="/hal.png" alt="" fill sizes="65px" className="halloween-bg__image" />
        </div>
        <div className="halloween-bg__item halloween-bg__item--6">
          <Image src="/hal4.png" alt="" fill sizes="75px" className="halloween-bg__image" />
        </div>
      </div>
      <div className="sound-toggle">
        <div className="sound-toggle__group">
          <span>√Çm thanh</span>
          <button type="button" onClick={toggleSound}>
            {soundEnabled ? "ON" : "OFF"}
          </button>
        </div>
        <div className="sound-toggle__group">
          <span>Nh·∫°c n·ªÅn</span>
          <button type="button" onClick={toggleBgMusic}>
            {bgMusicEnabled ? "ON" : "OFF"}
          </button>
        </div>
      </div>

      <main className="mx-auto flex min-h-screen w-full max-w-4xl flex-col items-center justify-center gap-8 px-6 py-16 text-center md:gap-10 md:px-10">
        {phase === "intro" && (
          <section className="pixel-card max-w-2xl bg-[#1f2937]">
            <h1 className="text-xl text-[#fb923c]">
              üéÉ Trick or Treat 
          </h1>
            <div className="mt-6 grid gap-5 text-left text-sm">
              <label className="grid gap-2 text-xs font-bold uppercase tracking-[0.3em] text-[#f8fafc]/70">
                T√™n c·ªßa c·∫≠u(tu·ª≥ ch·ªçn)
                <input
                  type="text"
                  value={playerName}
                  onChange={(event) => setPlayerName(event.target.value)}
                  className="border-[3px] border-black bg-[#0f172a] px-10 py-3 font-sans text-sm text-[#f8fafc] outline-none"
                  placeholder="VD:Ph·∫°m H·ªìng √Ånh ..."
                />
              </label>
              <label className="grid gap-2 text-xs font-bold uppercase tracking-[0.3em] text-[#f8fafc]/70">
                ƒêi·ªÅu c·∫≠u th√≠ch 
                <input
                  type="text"
                  value={likesInput}
                  onChange={(event) => setLikesInput(event.target.value)}
                  className="border-[3px] border-black bg-[#0f172a] px-4 py-3 font-sans text-sm text-[#f8fafc] outline-none"
                  placeholder="VD: m√®o, c√† ph√™, s√°ch"
                />
              </label>
            </div>
            <div className="mt-6 flex flex-col items-center gap-4">
              <button
                type="button"
                onClick={handleStart}
                className="pixel-button pixel-button--cyan"
              >
                B·∫Øt ƒë·∫ßu
              </button>
            </div>
          </section>
        )}

        {phase === "play" && (
          <section className="flex w-full flex-col items-center gap-8">
            <header className="pixel-card w-full bg-[#1f2937]">
              
              <p className="mt-3 text-[11px] font-semibold uppercase tracking-[0.3em] text-[#f8fafc]/80">
                M·ªói l∆∞·ª£t m·ªü m·ªôt ƒëi·ªÅu b·∫•t ng·ªù. C·∫≠u c√≥ t·ªëi ƒëa 8 l∆∞·ª£t ( ho·∫∑c h∆°n) v√† c√≥ th·ªÉ d·ª´ng b·∫•t c·ª© l√∫c n√†o.
              </p>
              <p className="mt-4 text-[11px] font-semibold uppercase tracking-[0.3em] text-[#22d3ee]">
                ƒê√£ m·ªü: {turnCount} / {MAX_TURNS} l∆∞·ª£t
          </p>
        </header>

            <div className="flex w-full flex-col items-center gap-6 lg:flex-row lg:items-start lg:gap-8">
              <div className="flex flex-col items-center gap-4">
                <div className="pixel-door" data-open={doorOpen || undefined}>
                  <div className="pixel-door__light" />
                  <div className="pixel-door__handle" />
                </div>
                <div className="flex flex-col items-center gap-3">
                  <span className="text-[11px] font-semibold uppercase tracking-[0.3em] text-[#f8fafc]/70">
                    C√≤n {Math.max(turnsLeft, 0)} l∆∞·ª£t ‚Ä¢ Ch·ªçn m·ªôt n√∫t nh√©!
                  </span>
                  <div className="flex flex-wrap justify-center gap-3">
                    <button
                      type="button"
                      onClick={() => handleDoorChoice("treat")}
                      disabled={isAnimatingDoor || turnCount >= MAX_TURNS}
                      className="pixel-button pixel-button--cyan"
                    >
                      Ch·ªçn Treat
                    </button>
                    <button
                      type="button"
                      onClick={() => handleDoorChoice("trick")}
                      disabled={isAnimatingDoor || turnCount >= MAX_TURNS}
                      className="pixel-button pixel-button--purple"
                    >
                      Ch·ªçn Trick
                    </button>
                  </div>
            </div>
          </div>

              <div className="flex w-full flex-1 flex-col items-center gap-4">
                {currentOutcome ? (
                  <article className="pixel-card w-full bg-[#151c2f] text-left">
                    <div className="flex flex-col gap-2 text-xs font-bold uppercase tracking-[0.35em] text-[#22d3ee]">
                      <span>
                        B·∫°n ch·ªçn: {currentOutcome.choice.toUpperCase()} ‚Ä¢ K·∫øt
                        qu·∫£: {currentOutcome.type === "treat" ? "Treat" : "Trick"}
                      </span>
                      <span>{currentOutcome.label}</span>
                    </div>
                    <p className="mt-4 text-sm font-semibold text-[#f8fafc]">
                      {currentOutcome.message}
                    </p>
                    {currentOutcome.prompt && (
                      <p className="mt-3 text-xs font-semibold uppercase tracking-[0.3em] text-[#fb923c]">
                        {currentOutcome.prompt}
                      </p>
                    )}
                  <figure className="result-figure mt-4" aria-hidden>
                    <div className="result-figure__frame">
                      <Image
                        src={currentOutcome.type === "treat" ? "/globe.svg" : "/window.svg"}
                        alt="K·∫øt qu·∫£"
                        fill
                        sizes="240px"
                      />
                    </div>
                  </figure>
                    {currentOutcome.miniGame === "ghost" &&
                      !currentOutcome.miniGameComplete && (
                        <GhostChase onFinished={handleMiniGameFinished} />
                      )}
                    {currentOutcome.miniGame === "ghost" &&
                      currentOutcome.miniGameComplete && (
                        <p className="mt-4 text-xs font-semibold uppercase tracking-[0.3em] text-[#22d3ee]">
                          {currentOutcome.miniGameSuccess
                            ? "Gi·ªèi qu√°! Nh·∫≠n th√™m 1 k·∫πo t∆∞·ªüng t∆∞·ª£ng üç¨"
                            : "Ma ch·∫°y nhanh th·∫≠t! B·∫°n v·∫´n gi·ªØ ƒë∆∞·ª£c m·ªôt n·ª• c∆∞·ªùi nh√©."}
                        </p>
                      )}
                    <div className="mt-6 flex flex-wrap gap-3">
                      {turnCount < MAX_TURNS && (
          <button
            type="button"
                          onClick={() => setCurrentOutcome(null)}
                          className="pixel-button pixel-button--cyan"
          >
                          M·ªü ti·∫øp
          </button>
                      )}
                      <button
                        type="button"
                        onClick={handleToFinal}
                        className="pixel-button"
                      >
                        Nh·∫≠n qu√† cu·ªëi
                      </button>
                    </div>
                  </article>
                ) : (
                  <div className="pixel-card w-full bg-[#151c2f]">
                    <p className="text-xs font-semibold uppercase tracking-[0.3em] text-[#22d3ee]">
                      G√µ c·ª≠a ƒë·ªÉ m·ªü b·∫•t ng·ªù cho ri√™ng {displayName}.
                    </p>
                    <p className="mt-3 text-[11px] font-medium uppercase tracking-[0.3em] text-[#f8fafc]/70">
                      C·∫≠u c√≥ th·ªÉ d·ª´ng b·∫•t c·ª© l√∫c n√†o ƒë·ªÉ nh·∫≠n qu√†.
                    </p>
                  </div>
                )}
                {turnCount >= MAX_TURNS && (
                  <div className="pixel-card w-full bg-[#111827]">
                    <p className="text-xs font-semibold uppercase tracking-[0.3em] text-[#fb923c]">
                      ƒê√£ h·∫øt 8 l∆∞·ª£t! ƒê√£ ƒë·∫øn l√∫c nh·∫≠n qu√† cu·ªëi c√πng.
                    </p>
                    <button
                      type="button"
                      onClick={handleToFinal}
                      className="pixel-button pixel-button--purple mt-4"
                    >
                      ƒê·∫øn qu√† cu·ªëi
                    </button>
                  </div>
                )}
              </div>
            </div>
          </section>
        )}

        {phase === "final" && (
          <section className="pixel-card max-w-2xl bg-[#1f2937] text-left">
            <p className="mt-3 text-xs font-semibold uppercase tracking-[0.3em] text-[#22d3ee]">
              C·∫£m ∆°n b·∫°n ƒë√£ ch∆°i mong r·∫±ng c·∫≠u nh·∫π tay =)))). 
            </p>
            <div className="mt-6 grid gap-5">
              <VoucherPreview name={playerName.trim()} />
              <div className="pixel-card bg-[#151c2f] text-xs">
                <p className="font-semibold uppercase tracking-[0.3em] text-[#f8fafc]/70">
                  L∆∞·ª£t b·∫°n ƒë√£ m·ªü: {turnCount} / {MAX_TURNS}
                </p>
                <p className="mt-2 font-semibold uppercase tracking-[0.3em] text-[#22d3ee]">
                  Nh·ªØng ƒëi·ªÅu b·∫°n m·ªü ƒë∆∞·ª£c:
                </p>
                <ul className="mt-3 grid gap-2 text-[11px] text-[#f8fafc]/80">
                  {history.slice(0, 5).map((item) => (
                    <li key={item.id}>
                      ‚Ä¢ [{item.type === "treat" ? "Treat" : "Trick"}]{" "}
                      {item.message}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            <div className="mt-6 flex flex-wrap gap-4">
              <button
                type="button"
                onClick={() => generateVoucherImage(playerName)}
                className="pixel-button pixel-button--cyan"
              >
                T·∫£i PNG
              </button>
              <button
                type="button"
                onClick={resetGame}
                className="pixel-button pixel-button--purple"
              >
                Ch∆°i l·∫°i
              </button>
            </div>
          </section>
        )}
      </main>
    </>
  );
}
